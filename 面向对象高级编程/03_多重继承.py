#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Time    : 2017/12/5 12:38
# @Author  : huangkeke
# @Email   : hkkhuang@163.com
# @File    : 03_多重继承.py

# 继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能。
# 回忆一下Animal类层次的设计，假设我们要实现以下4种动物：
#     Dog - 狗狗；
#     Bat - 蝙蝠；
#     Parrot - 鹦鹉；
#     Ostrich - 鸵鸟。
# 如果按照哺乳动物和鸟类归类，我们可以设计出这样的类的层次：
# 如果按照哺乳动物和鸟类归类，我们可以设计出这样的类的层次：
#
#                                      ┌───────┐
#                                      │    Animal    │
#                                      └──────--┘
#                                              │
#                    ┌────────────┴────────────┐
#                    │                                                  │
#                    ▼                                                  ▼
#           ┌──────┐                                       ┌───────
#           │   Mammal   │                                       │    Bird     │
#           └──────┘                                       └───────
#                  │                                                     │
#      ┌─────┴─────-─┐                          ┌─────┴──────┐
#      │            │            │                         │                        │
#      ▼            ▼            ▼                         ▼                        ▼
# ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
# │   Dog            │  │   Bat            │  │ Parrot           │  │ Ostrich          │
# └─────────┘  └─────────┘  └─────────┘  └─────────┘
#
# 但是如果按照“能跑”和“能飞”来归类，我们就应该设计出这样的类的层次：
#
#                 ┌───────────────┐
#                 │    Animal     │
#                 └───────────────┘
#                         │
#            ┌────────────┴────────────┐
#            │                         │
#            ▼                         ▼
#     ┌─────────────┐           ┌─────────────┐
#     │  Runnable   │           │   Flyable   │
#     └─────────────┘           └─────────────┘
#            │                         │
#      ┌─────┴──────┐            ┌─────┴──────┐
#      │            │            │            │
#      ▼            ▼            ▼            ▼
# ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
# │   Dog   │  │ Ostrich │  │ Parrot  │  │   Bat   │
# └─────────┘  └─────────┘  └─────────┘  └─────────┘
#
# 如果要把上面的两种分类都包含进来，我们就得设计更多的层次：
#
#     哺乳类：能跑的哺乳类，能飞的哺乳类；
#     鸟类：能跑的鸟类，能飞的鸟类。
#
# 这么一来，类的层次就复杂了：
#
#                 ┌───────────────┐
#                 │    Animal     │
#                 └───────────────┘
#                         │
#            ┌────────────┴────────────┐
#            │                         │
#            ▼                         ▼
#     ┌─────────────┐           ┌─────────────┐
#     │   Mammal    │           │    Bird     │
#     └─────────────┘           └─────────────┘
#            │                         │
#      ┌─────┴──────┐            ┌─────┴──────┐
#      │            │            │            │
#      ▼            ▼            ▼            ▼
# ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
# │  MRun   │  │  MFly   │  │  BRun   │  │  BFly   │
# └─────────┘  └─────────┘  └─────────┘  └─────────┘
#      │            │            │            │
#      │            │            │            │
#      ▼            ▼            ▼            ▼
# ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
# │   Dog   │  │   Bat   │  │ Ostrich │  │ Parrot  │
# └─────────┘  └─────────┘  └─────────┘  └─────────┘
class Animal(object):
    pass

# 大类:
class Mammal(Animal):
    pass

class Bird(Animal):
    pass

# 各种动物:
class Dog(Mammal):
    pass

class Bat(Mammal):
    pass

class Parrot(Bird):
    pass

class Ostrich(Bird):
    pass

class Runnable(object):
    def run(self):
        print('Running...')

class Flyable(object):
    def fly(self):
        print('Flying...')

# 对于需要Runnable功能的动物，就多继承一个Runnable，例如Dog
class Dog(Mammal, Runnable):
    pass

# 对于需要Flyable功能的动物，就多继承一个Flyable，例如Bat：
class Bat(Mammal, Flyable):
    pass

# 通过多重继承，一个子类就可以同时获得多个父类的所有功能。
